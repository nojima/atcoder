#!/usr/bin/python3
import argparse
import os.path as path
import re
import shutil
import subprocess
import sys

RE_LOCAL_INCLUDE = re.compile(r'^\s*\#\s*include\s*\"([^"]*)\"\s*$')
RE_PRAGMA_ONCE = re.compile(r'^\s*\#\s*pragma\s+once\s*$')

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("problem", metavar="PROBLEM")
    parser.add_argument("--stdout", action="store_true")
    args = parser.parse_args()

    top_dir = path.dirname(path.dirname(path.abspath(__file__)))

    filename = path.abspath(args.problem.upper() + ".cpp")
    packed = pack(filename, set(), top_dir)
    if args.stdout:
        print(packed)
    else:
        copy_to_clipboard(args.problem, packed)

def pack(filename, included, top_dir):
    if filename in included:
        return ""
    included.add(filename)

    ret = ""
    with open(filename) as f:
        for line in f:
            m = RE_LOCAL_INCLUDE.match(line)
            if m:
                header_name = m.group(1)
                header_filename = search_header_file(header_name, filename, top_dir)
                ret += pack(header_filename, included, top_dir)
                continue
            m = RE_PRAGMA_ONCE.match(line)
            if m:
                continue
            ret += line
    return ret

def search_header_file(name, current_file, top_dir):
    filename1 = path.abspath(path.join(path.dirname(current_file), name))
    if path.exists(filename1):
        return filename1
    filename2 = path.abspath(path.join(top_dir, name))
    if path.exists(filename2):
        return filename2
    print("Unknown header file: {}".format(name))
    sys.exit(1)

def copy_to_clipboard(problem, packed):
    ret = subprocess.run([detect_clipboard_command()], input=packed.encode("utf-8"))
    if ret.returncode != 0:
        sys.exit(1)
    print("Copied to the clipboard: problem=" + problem.upper(), file=sys.stderr, flush=True)

def detect_clipboard_command():
    candidates = ["clip.exe", "pbcopy"]
    for candidate in candidates:
        if shutil.which(candidate) is not None:
            return candidate
    print("No clipboard command are available.", file=sys.stderr, flush=True)
    sys.exit(1)

if __name__ == '__main__':
    main()
